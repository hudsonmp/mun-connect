#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Get deployment target from environment variable
const target = process.env.DEPLOYMENT_TARGET || 'main';
console.log(`Setting up build for target: ${target}`);

// Create a .env.local file with deployment-specific configurations
let envContent = '';

// Copy from .env.local if it exists
if (fs.existsSync('.env.local')) {
  envContent = fs.readFileSync('.env.local', 'utf8');
}

// Add deployment target
envContent += `\nDEPLOYMENT_TARGET=${target}\n`;

// Write to .env.local
fs.writeFileSync('.env.local', envContent);

// Update next.config.js to use next.config.mjs
if (fs.existsSync('next.config.js') && fs.existsSync('next.config.mjs')) {
  console.log('Updating next.config.js to use next.config.mjs');
  fs.writeFileSync('next.config.js', `// This file is auto-generated by setup-build.js
// Do not edit directly

const config = require('./next.config.mjs');

// Extract the actual configuration object
const nextConfig = config.default || config;

module.exports = nextConfig;
`);
}

// Add a specific configuration for dashboard deployment
if (target === 'dashboard') {
  console.log('Setting up dashboard-specific configuration');
  
  // Ensure dashboard routes have auth providers
  const dashboardLayoutPath = path.join('app', '(dashboard)', 'layout.tsx');
  if (!fs.existsSync(dashboardLayoutPath)) {
    console.log('Creating dashboard layout with AuthProvider');
    const layoutContent = `"use client"

import React from "react"
import { AuthProvider } from "../../lib/auth-context"
import { Toaster } from "../../components/ui/toaster"

export default function DashboardLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <AuthProvider>
      {children}
      <Toaster />
    </AuthProvider>
  )
}`;
    
    // Ensure directory exists
    const dir = path.dirname(dashboardLayoutPath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    
    fs.writeFileSync(dashboardLayoutPath, layoutContent);
  }
}

console.log('Setup completed successfully!'); 